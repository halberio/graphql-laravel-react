"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")


type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    password: String! @rules(apply: ["min:4"]) @bcrypt
}

type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
}



input LoginInput {
    email: String!
    password: String!
}

type RegisterResponse {
    status: String!
    message: String!
    redirect: String!
}
type LoginResponse {
    user: User
    token: String
}
type LogoutResponse {
    status: String!
    message: String
}
input RegisterInput {
    name: String @rules(apply: ["required"])
    email: String @rules(apply: ["required"])
    password: String @rules(apply: ["required"])
}

type Mutation {
    login(data: LoginInput): LoginResponse! @field(resolver: "App\\GraphQL\\Resolvers\\LoginResolver@resolve")

    register(data: RegisterInput!) : RegisterResponse! @field(resolver: "App\\GraphQL\\Resolvers\\RegisterResolver@resolve")

    logout: LogoutResponse! @field(resolver: "App\\GraphQL\\Resolvers\\LogoutResolve@resolve")

    createUser(
        name: String! @rules(apply: ["required", "min:4"]),
        email: String! @rules(apply: ["email", "unique:users"]),
        password: String! @rules(apply: ["min:4"]) @bcrypt
    ): User @create(model: "App\\User")

    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "App\\User")

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User @delete(model: "App\\User")
}


